######## TP1  ######################
#installer d'abord la library 'fitdistrplus'
library("fitdistrplus")
install.packages("fitdistrplus")
######## TP1  ######################
#installer d'abord la library 'fitdistrplus'
library("fitdistrplus")
data("groundbeef")
str(groundbeef)
x=groundbeef$serving
min(x)
max(x)
var(x)
plotdist(groundbeef$serving, histo = TRUE, demp = TRUE)
plotdist(groundbeef$serving, histo = TRUE, demp = False)
plotdist(groundbeef$serving, histo = TRUE, demp = FALSE)
x
d=density(x)
plot(d)
plotdist(x, histo = TRUE, demp = TRUE)
#Fitter avec la distribution de weibull
fw <- fitdist(groundbeef$serving, "weibull")
summary(fw)
fg <- fitdist(groundbeef$serving, "gamma")
fln <- fitdist(groundbeef$serving, "lnorm")
par(mfrow = c(2, 2))
plot.legend <- c("Weibull", "lognormal", "gamma")
denscomp(list(fw, fln, fg), legendtext = plot.legend)
qqcomp(list(fw, fln, fg), legendtext = plot.legend)
cdfcomp(list(fw, fln, fg), legendtext = plot.legend)
ppcomp(list(fw, fln, fg), legendtext = plot.legend)
#installer d'abord le package 'remotes' puis executer les deux instruction suivante
library(remotes)
install.packages("remotes")
#installer d'abord le package 'remotes' puis executer les deux instruction suivante
library(remotes)
install_version("actuar", "3.1.2")
###
library("fitdistrplus")
data("endosulfan")
ATV <-endosulfan$ATV
par(mfrow = c(1, 1))
fendo.ln <- fitdist(ATV, "lnorm")
library("actuar")
install.packages("actuar")
library("actuar")
fendo.ll <- fitdist(ATV, "llogis", start = list(shape = 1, scale = 500))
fendo.P <- fitdist(ATV, "pareto", start = list(shape = 1, scale = 500))
fendo.B <- fitdist(ATV, "burr", start = list(shape1 = 0.3, shape2 = 1,rate = 1))
cdfcomp(list(fendo.ln, fendo.ll, fendo.P, fendo.B), xlogscale = TRUE, ylogscale = TRUE, legendtext = c("lognormal", "loglogistic", "Pareto", "Burr"))
gofstat(list(fendo.ln, fendo.ll, fendo.P, fendo.B), fitnames = c("lnorm", "llogis", "Pareto", "Burr"))
load("~/.RData")
install.packages("actuar")
View(df1)
path="C:\\Performance_BI\\data_with_VANAD"
setwd(path)
df1=read.table("calls-2014-01.csv",sep=",",dec=".",header=TRUE)
df1<-na.omit(df1)
View(df1)
path="C:\Performance_BI\data_with_VANAD"
path="C:\Performance_BI\data_with_VANAD"
path="C:\\Performance_BI\\data_with_VANAD"
setwd(path)
df1=read.table("calls-2014-01.csv",sep=",",dec=".",header=TRUE)
df1<-na.omit(df1)
View(df1)
path="C:\\Users\\LENOVO\\Desktop\\MASTER2_UCAD_B_I\\Performance_des_systemes_decisionnels\\data_with_VANAD\\data with VANAD"
setwd(path)
df1=read.table("calls-2014-01.csv",sep=",",dec=".",header=TRUE)
df1<-na.omit(df1)
View(df1)
df30175= df1[which(df1$queue_name=='30175'), ]
View(df30175)
df30175= df1[which(df1$queue_name=='30175'), ]
View(df30175)
df30175<-na.omit(df30175)
# visualiser
#print(head(df30175))
#Get answered time and convert  it to  second
datetime= df30175$date_received
datetimes= as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S")
dates <- format(datetimes, format = "%Y-%m-%d")
times <- format(datetimes, format = "%H:%M:%S")
#times= as.POSIXct(times, format = "%H:%M:%S")
#dates= as.POSIXct(dates, format = "%Y-%m-%d")
timeSecond<-3600*as.numeric(format(as.POSIXct(times), format = "%H"))+
60*as.numeric(format(as.POSIXct(times), format = "%M"))+
as.numeric(format(as.POSIXct(times), format = "%S"))
df30175$times=times
df30175$dates=dates
df30175$timeSecond=timeSecond
df30175= df1[which(df1$queue_name=='30175'), ]
View(df30175)
#supprimer les ligne avec des données manquante
df30175<-na.omit(df30175)
# visualiser
#print(head(df30175))
#Get answered time and convert  it to  second
datetime= df30175$date_received
datetimes= as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S")
dates <- format(datetimes, format = "%Y-%m-%d")
times <- format(datetimes, format = "%H:%M:%S")
#times= as.POSIXct(times, format = "%H:%M:%S")
#dates= as.POSIXct(dates, format = "%Y-%m-%d")
timeSecond<-3600*as.numeric(format(as.POSIXct(times), format = "%H"))+
60*as.numeric(format(as.POSIXct(times), format = "%M"))+
as.numeric(format(as.POSIXct(times), format = "%S"))
df30175$times=times
df30175$dates=dates
df30175$timeSecond=timeSecond
View(df1)
#row.names(df1)
#print(head(df1))
#str(df1)
# 1- Nous determinons le jeu de données (dataset) pour le type d'appel 30175
df30175= df1[which(df1$queue_name=='30175'), ]
View(df30175)
#supprimer les ligne avec des données manquante
df30175<-na.omit(df30175)
# visualiser
#print(head(df30175))
#Get answered time and convert  it to  second
datetime= df30175$date_received
datetimes= as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S")
dates <- format(datetimes, format = "%Y-%m-%d")
times <- format(datetimes, format = "%H:%M:%S")
times= as.POSIXct(times, format = "%H:%M:%S")
dates= as.POSIXct(dates, format = "%Y-%m-%d")
timeSecond<-3600*as.numeric(format(as.POSIXct(times), format = "%H"))+
60*as.numeric(format(as.POSIXct(times), format = "%M"))+
as.numeric(format(as.POSIXct(times), format = "%S"))
df30175$times=times
df30175$dates=dates
df30175$timeSecond=timeSecond
path="C:\\Users\\LENOVO\\Desktop\\MASTER2_UCAD_B_I\\Performance_des_systemes_decisionnels\\data_with_VANAD\\data with VANAD"
setwd(path)
df1=read.table("calls-2014-01.csv",sep=",",dec=".",header=TRUE)
df1<-na.omit(df1)
View(df1)
path="C:\\Users\\LENOVO\\Desktop\\MASTER2_UCAD_B_I\\Performance_des_systemes_decisionnels\\data_with_VANAD\\data with VANAD"
setwd(path)
df1=read.table("calls-2014-01.csv",sep=",",dec=".",header=TRUE)
df1<-na.omit(df1)
View(df1)
#row.names(df1)
#print(head(df1))
#str(df1)
# 1- Nous determinons le jeu de données (dataset) pour le type d'appel 30175
df30175= df1[which(df1$queue_name=='30175'), ]
View(df30175)
#supprimer les ligne avec des données manquante
df30175<-na.omit(df30175)
# visualiser
#print(head(df30175))
#Get answered time and convert  it to  second
datetime= df30175$date_received
datetimes= as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S")
dates <- format(datetimes, format = "%Y-%m-%d")
times <- format(datetimes, format = "%H:%M:%S")
times= as.POSIXct(times, format = "%H:%M:%S")
dates= as.POSIXct(dates, format = "%Y-%m-%d")
timeSecond<-3600*as.numeric(format(as.POSIXct(times), format = "%H"))+
60*as.numeric(format(as.POSIXct(times), format = "%M"))+
as.numeric(format(as.POSIXct(times), format = "%S"))
df30175$times=times
df30175$dates=dates
df30175$timeSecond=timeSecond
df30175= df1[which(df1$answered!='NULL'),]
View(df30175)
df30175= df1[which(df1$answered!='NULL'),]
df30175<-na.omit(df30175)
View(df30175)
df30175= df1[which(df1$answered!='NULL'),]
df30175<-na.omit(df30175)
View(df30175)
#Get answered time and convert  it to  second
datetime= df30175$answered
datetimes= as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S")
dates <- format(datetimes, format = "%Y-%m-%d")
times <- format(datetimes, format = "%H:%M:%S")
times= as.POSIXct(times, format = "%H:%M:%S")
dates= as.POSIXct(dates, format = "%Y-%m-%d")
timeSecond<-3600*as.numeric(format(as.POSIXct(times), format = "%H"))+
60*as.numeric(format(as.POSIXct(times), format = "%M"))+
as.numeric(format(as.POSIXct(times), format = "%S"))
df30175$times=times
df30175$dates=dates
df30175$timeSecond=timeSecond
path="C:\\Users\\LENOVO\\Desktop\\MASTER2_UCAD_B_I\\Performance_des_systemes_decisionnels\\data_with_VANAD\\data with VANAD"
setwd(path)
df1=read.table("calls-2014-01.csv",sep=",",dec=".",header=TRUE)
df1<-na.omit(df1)
View(df1)
#row.names(df1)
#print(head(df1))
#str(df1)
# 1- Nous determinons le jeu de données (dataset) pour le type d'appel 30175
df30175= df1[which(df1$queue_name=='30175'), ]
View(df30175)
#supprimer les ligne avec des données manquante
df30175<-na.omit(df30175)
# visualiser
#print(head(df30175))
#Get answered time and convert  it to  second
datetime= df30175$date_received
datetimes= as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S")
dates <- format(datetimes, format = "%Y-%m-%d")
times <- format(datetimes, format = "%H:%M:%S")
times= as.POSIXct(times, format = "%H:%M:%S")
dates= as.POSIXct(dates, format = "%Y-%m-%d")
timeSecond<-3600*as.numeric(format(as.POSIXct(times), format = "%H"))+
60*as.numeric(format(as.POSIXct(times), format = "%M"))+
as.numeric(format(as.POSIXct(times), format = "%S"))
df30175$times=times
df30175$dates=dates
df30175$timeSecond=timeSecond
df30175= df1[which(df1$answered!='NULL'),]
df30175<-na.omit(df30175)
View(df30175)
#Get answered time and convert  it to  second
datetime= df30175$answered
datetimes= as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S")
dates <- format(datetimes, format = "%Y-%m-%d")
times <- format(datetimes, format = "%H:%M:%S")
times= as.POSIXct(times, format = "%H:%M:%S")
dates= as.POSIXct(dates, format = "%Y-%m-%d")
a_timeSecond<-3600*as.numeric(format(as.POSIXct(times), format = "%H"))+
60*as.numeric(format(as.POSIXct(times), format = "%M"))+
as.numeric(format(as.POSIXct(times), format = "%S"))
df30175$times=times
df30175$dates=dates
df30175$timeSecond=timeSecond
path="C:\\Users\\LENOVO\\Desktop\\MASTER2_UCAD_B_I\\Performance_des_systemes_decisionnels\\data_with_VANAD\\data with VANAD"
setwd(path)
df1=read.table("calls-2014-01.csv",sep=",",dec=".",header=TRUE)
df1<-na.omit(df1)
View(df1)
#row.names(df1)
#print(head(df1))
#str(df1)
# 1- Nous determinons le jeu de données (dataset) pour le type d'appel 30175
df30175= df1[which(df1$queue_name=='30175'), ]
View(df30175)
#supprimer les ligne avec des données manquante
df30175<-na.omit(df30175)
# visualiser
#print(head(df30175))
#Get answered time and convert  it to  second
datetime= df30175$date_received
datetimes= as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S")
dates <- format(datetimes, format = "%Y-%m-%d")
times <- format(datetimes, format = "%H:%M:%S")
times= as.POSIXct(times, format = "%H:%M:%S")
dates= as.POSIXct(dates, format = "%Y-%m-%d")
timeSecond<-3600*as.numeric(format(as.POSIXct(times), format = "%H"))+
60*as.numeric(format(as.POSIXct(times), format = "%M"))+
as.numeric(format(as.POSIXct(times), format = "%S"))
df30175$times=times
df30175$dates=dates
df30175$timeSecond=timeSecond
